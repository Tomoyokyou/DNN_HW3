#include "parser.h"
#include "dnn.h"
#include "dataset.h"
#include "util.h"
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cstdlib>

using namespace std;

<<<<<<< HEAD
void myUsage(){cerr<<"$cmd [inputfile] [testfile] --outName [] \n options: \n\t--phonenum [] --rate [] --segment [] --batchsize [] --maxEpoch [] --momentum [] --decay [] \n\t--load [] --dim [indim-hidnum1-hidnum2-outdim] --range/variance []"<<endl;}
=======
void myUsage(){cerr<<"$cmd [inputfile] [testfile] --outName [] \n options: \n\t--phonenum [] --rate [] --segment [] --batchsize [] --maxEpoch [] --momentum [] --reg [] --decay [] \n\t--load [] --dim [indim-hidnum1-hidnum2-outdim] --range/variance []"<<endl;}
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf

int main(int argc,char** argv){
	srand((unsigned)time(NULL));
	PARSER p;
	p.addMust("trainFilename",false);
	p.addMust("testFilename",false);
	p.addOption("--rate",true);
	p.addOption("--segment",true);
	p.addOption("--batchsize",true);
	p.addOption("--maxEpoch",true);
	p.addOption("--momentum",true);
<<<<<<< HEAD
=======
	p.addOption("--reg",true);
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf
	p.addOption("--outName",false);
	p.addOption("--load",false);
	p.addOption("--decay",true);
	p.addOption("--variance",true);
	p.addOption("--range",true);
	p.addOption("--dim",false);
	string trainF,testF,labelF,outF,loadF,dims;
	size_t b_size,m_e;
<<<<<<< HEAD
	float rate,segment,momentum,decay,var;
=======
	float rate,segment,momentum,decay,var,reg;
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf
	Init _inittype;
	if(!p.read(argc,argv)){
		myUsage();
		return 1;
	}
	p.getString("trainfilename",trainF);
	p.getString("testfilename",testF);
	if(!p.getNum("--rate",rate)){rate=0.1;}
	if(!p.getNum("--segment",segment)){segment=0.8;}
	if(!p.getNum("--batchsize",b_size)){b_size=128;}
	if(!p.getNum("--maxEpoch",m_e)){m_e=10000;}
	if(!p.getNum("--momentum",momentum)){momentum=0;}
<<<<<<< HEAD
=======
	if(!p.getNum("--reg",reg)){reg=1.0e-06;}
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf
	if(!p.getString("--outName",outF)){outF="out.mdl";}
	if(!p.getNum("--decay",decay)){decay=1;}
	if(p.getNum("--variance",var)&&p.getNum("--range",var)){cerr<<"--variance for normal init, --range for uniform init, not both!"<<endl;return 1;}
	if(!p.getNum("--variance",var)){var=0.2;_inittype=NORMAL;}
	if(!p.getNum("--range",var)){var=1;_inittype=UNIFORM;}
	if(!p.getString("--dim",dims)){cerr<<"wrong hidden layer dimensions";return 1;}
	p.print();
	Dataset allData(trainF.c_str());
	
	if(p.getString("--load",loadF)){
		DNN nnload;
		if(nnload.load(loadF)){
		nnload.setLearningRate(rate);
		nnload.setMomentum(momentum);
<<<<<<< HEAD
=======
		nnload.setReg(reg);
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf
		nnload.train(allData,b_size,m_e,0.8,decay);
		nnload.save(outF);
		}
		else{	cerr<<"loading file:"<<loadF<<" failed! please check again..."<<endl;return 1;}
	}
	else{
	vector<size_t>dim;
	parseDim(dims,dim);
<<<<<<< HEAD
	DNN dnn(rate,momentum,var,_inittype,dim,BATCH);
=======
	DNN dnn(rate,momentum,reg,var,_inittype,dim,BATCH);
>>>>>>> 83de668d99776f89136a94a92e92e2eac338fecf
	dnn.train(allData,b_size,m_e,0.8,decay);
	dnn.save(outF);
	}
	cout<<"end of training!";
	cout<<"\n model saved as :"<<outF<<endl;
	return 0;
}

