!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL	../include/dnn.h	/^	ALL, $/;"	e	enum:Method
BATCH	../include/dnn.h	/^	BATCH, $/;"	e	enum:Method
DATASET_H_	../include/dataset.h	2;"	d
DNN	../include/dnn.h	/^class DNN{$/;"	c
DNN	./dnn.cpp	/^DNN::DNN():_learningRate(0.001),_momentum(0), _method(ALL){}$/;"	f	class:DNN
DNN	./dnn.cpp	/^DNN::DNN(float learningRate, float momentum, float variance,Init init, const vector<size_t>& v, Method method):_learningRate(learningRate), _momentum(momentum), _method(method){$/;"	f	class:DNN
DNN_H	../include/dnn.h	2;"	d
Dataset	../include/dataset.h	/^class Dataset{$/;"	c
Dataset	./dataset.cpp	/^Dataset::Dataset(){$/;"	f	class:Dataset
Dataset	./dataset.cpp	/^Dataset::Dataset(const Dataset& d){$/;"	f	class:Dataset
Dataset	./dataset.cpp	/^Dataset::Dataset(const char* dataPath){$/;"	f	class:Dataset
ERROR	../include/parser.h	/^        ERROR,$/;"	e	enum:TYPE
HOST_MATRIX_H	../include/host_matrix.h	2;"	d
Init	../include/dnn.h	/^enum Init{$/;"	g
LABEL_NUM	../include/dataset.h	10;"	d
MAX_EPOCH	./dnn.cpp	14;"	d	file:
MUST	../include/parser.h	/^        MUST,$/;"	e	enum:TYPE
MUSTNUM	../include/parser.h	/^        MUSTNUM,$/;"	e	enum:TYPE
MYNNGEN_H	../include/mynngen.h	2;"	d
Method	../include/dnn.h	/^enum Method{$/;"	g
NONE	../include/parser.h	/^        NONE,$/;"	e	enum:TYPE
NORMAL	../include/dnn.h	/^	NORMAL,$/;"	e	enum:Init
ONE	../include/dnn.h	/^	ONE$/;"	e	enum:Method
OPTION	../include/parser.h	/^        OPTION,$/;"	e	enum:TYPE
OPTIONNUM	../include/parser.h	/^        OPTIONNUM,$/;"	e	enum:TYPE
OUTPUT_NUM	../include/dataset.h	11;"	d
PARSER	../include/parser.h	/^class PARSER{$/;"	c
PARSER	./parser.cpp	/^PARSER::PARSER(){$/;"	f	class:PARSER
PARSER	./parser.cpp	/^PARSER::PARSER(const PARSER& p){$/;"	f	class:PARSER
PARSER_H	../include/parser.h	2;"	d
RBM	../include/dnn.h	/^	RBM,$/;"	e	enum:Init
Sigmoid	../include/transforms.h	/^class Sigmoid : public Transforms{$/;"	c
Sigmoid	./transforms.cpp	/^Sigmoid::Sigmoid(const Sigmoid& s): Transforms(s){$/;"	f	class:Sigmoid
Sigmoid	./transforms.cpp	/^Sigmoid::Sigmoid(const mat& w, const mat& bias): Transforms(w,bias){$/;"	f	class:Sigmoid
Sigmoid	./transforms.cpp	/^Sigmoid::Sigmoid(size_t inputdim,size_t outputdim,float range): Transforms(inputdim,outputdim,range){$/;"	f	class:Sigmoid
Sigmoid	./transforms.cpp	/^Sigmoid::Sigmoid(size_t inputdim,size_t outputdim,myNnGen& ran): Transforms(inputdim,outputdim,ran){$/;"	f	class:Sigmoid
Softmax	../include/transforms.h	/^class Softmax : public Transforms{$/;"	c
Softmax	./transforms.cpp	/^Softmax::Softmax(const Softmax& s): Transforms(s){$/;"	f	class:Softmax
Softmax	./transforms.cpp	/^Softmax::Softmax(const mat& w, const mat& bias):Transforms(w,bias){$/;"	f	class:Softmax
Softmax	./transforms.cpp	/^Softmax::Softmax(size_t inputdim,size_t outputdim,float range): Transforms(inputdim,outputdim,range){$/;"	f	class:Softmax
Softmax	./transforms.cpp	/^Softmax::Softmax(size_t inputdim,size_t outputdim,myNnGen& ran): Transforms(inputdim,outputdim,ran){$/;"	f	class:Softmax
TRANSFORMS_H	../include/transforms.h	2;"	d
TYPE	../include/parser.h	/^enum TYPE{$/;"	g
Transforms	../include/transforms.h	/^class Transforms{$/;"	c
Transforms	./transforms.cpp	/^Transforms::Transforms(const Transforms& t):_w(t._w),_i(t._i),_pw(t._pw){}$/;"	f	class:Transforms
Transforms	./transforms.cpp	/^Transforms::Transforms(const mat& w,const mat& b){$/;"	f	class:Transforms
Transforms	./transforms.cpp	/^Transforms::Transforms(size_t inputdim,size_t outputdim,float range){$/;"	f	class:Transforms
Transforms	./transforms.cpp	/^Transforms::Transforms(size_t inputdim,size_t outputdim,myNnGen& ran){$/;"	f	class:Transforms
Transpose	../include/host_matrix.h	/^		Transpose(const host_matrix<T>& m): _m(m){}$/;"	f	class:host_matrix::Transpose
Transpose	../include/host_matrix.h	/^	class Transpose {$/;"	c	class:host_matrix
UNIFORM	../include/dnn.h	/^	UNIFORM,$/;"	e	enum:Init
UTIL_H	../include/util.h	2;"	d
_To39PhonemeMap	../include/dataset.h	/^	map<string, string> _To39PhonemeMap; \/\/Map the output to 39 dimension$/;"	m	class:Dataset
_batchCtr	../include/dataset.h	/^	long int _batchCtr;	$/;"	m	class:Dataset
_cols	../include/host_matrix.h	/^	size_t _cols;$/;"	m	class:host_matrix
_data	../include/dataset.h	/^	float** _data;$/;"	m	class:Dataset
_data	../include/host_matrix.h	/^	T* _data;$/;"	m	class:host_matrix
_dataNum	../include/dataset.h	/^	size_t _dataNum;$/;"	m	class:Dataset
_dis	../include/mynngen.h	/^		normal_distribution<float>* _dis;$/;"	m	class:myNnGen
_featureDim	../include/dataset.h	/^	size_t _featureDim; \/\/input Dim : 39 or 69$/;"	m	class:Dataset
_frameRange	../include/dataset.h	/^	int _frameRange; \/\/Used for frame ??$/;"	m	class:Dataset
_ggen	../include/mynngen.h	/^		mt19937 _ggen;$/;"	m	class:myNnGen
_i	../include/transforms.h	/^		mat _i;$/;"	m	class:Transforms
_isLabeled	../include/dataset.h	/^	bool _isLabeled;$/;"	m	class:Dataset
_label	../include/dataset.h	/^	int* _label; \/\/ output phoneme changed to integer$/;"	m	class:Dataset
_labelMap	../include/dataset.h	/^	map<string, int> _labelMap; \/\/Map phoneme to int$/;"	m	class:Dataset
_labelNum	../include/dataset.h	/^	size_t _labelNum;$/;"	m	class:Dataset
_learningRate	../include/dnn.h	/^	float _learningRate;$/;"	m	class:DNN
_m	../include/host_matrix.h	/^		const host_matrix<T> _m;$/;"	m	class:host_matrix::Transpose
_m	../include/mynngen.h	/^		float _m;$/;"	m	class:myNnGen
_method	../include/dnn.h	/^	Method _method;$/;"	m	class:DNN
_momentum	../include/dnn.h	/^	float _momentum;$/;"	m	class:DNN
_mustHave	../include/parser.h	/^    vector<string> _mustHave;$/;"	m	class:PARSER
_mustHaveNum	../include/parser.h	/^    vector<string> _mustHaveNum;$/;"	m	class:PARSER
_mustList	../include/parser.h	/^    vector<string> _mustList;$/;"	m	class:PARSER
_name	../include/dataset.h	/^	string* _name;$/;"	m	class:Dataset
_notOrig	../include/dataset.h	/^	bool _notOrig;$/;"	m	class:Dataset
_numMap	../include/parser.h	/^    map<string,float> _numMap;$/;"	m	class:PARSER
_options	../include/parser.h	/^    vector<string> _options;$/;"	m	class:PARSER
_optionsNum	../include/parser.h	/^    vector<string> _optionsNum;$/;"	m	class:PARSER
_pw	../include/transforms.h	/^		mat _pw;$/;"	m	class:Transforms
_recogCtr	../include/dataset.h	/^	int _recogCtr;$/;"	m	class:Dataset
_rows	../include/host_matrix.h	/^	size_t _rows;$/;"	m	class:host_matrix
_stringMap	../include/parser.h	/^    map<string,string> _stringMap;$/;"	m	class:PARSER
_transforms	../include/dnn.h	/^	vector<Transforms*> _transforms;$/;"	m	class:DNN
_v	../include/mynngen.h	/^		float _v;$/;"	m	class:myNnGen
_validateAccuracy	../include/dnn.h	/^	vector<float> _validateAccuracy;$/;"	m	class:DNN
_w	../include/transforms.h	/^		mat _w;$/;"	m	class:Transforms
addMust	./parser.cpp	/^void PARSER::addMust(string name,bool isNum){$/;"	f	class:PARSER
addOption	./parser.cpp	/^void PARSER::addOption(string name,bool isNum){$/;"	f	class:PARSER
backPropagate	./dnn.cpp	/^void DNN::backPropagate(const mat& deltaMat, float learningRate, float momentum){$/;"	f	class:DNN
backPropagate	./transforms.cpp	/^void Sigmoid::backPropagate(mat& out,const mat& delta, float rate,float momentum){$/;"	f	class:Sigmoid
backPropagate	./transforms.cpp	/^void Softmax::backPropagate(mat& out,const mat& delta,float rate, float momentum){$/;"	f	class:Softmax
computeErrRate	./dnn.cpp	/^float computeErrRate(const vector<size_t>& ans, const vector<size_t>& output){$/;"	f
computeLabel	./dnn.cpp	/^void computeLabel(vector<size_t>& result,const mat& outputMat){$/;"	f
dataSegment	./dataset.cpp	/^void Dataset::dataSegment( Dataset& trainData, Dataset& validData, float trainProp){$/;"	f	class:Dataset
exp	../include/host_math.h	/^host_matrix<T> exp(const host_matrix<T>& m){$/;"	f
feedForward	./dnn.cpp	/^void DNN::feedForward(mat& outputMat, const mat& inputMat, bool train){$/;"	f	class:DNN
fillwith	../include/host_matrix.h	/^void host_matrix<T>::fillwith(T val){$/;"	f	class:host_matrix
find	./parser.cpp	/^TYPE PARSER::find(string name){$/;"	f	class:PARSER
forward	./transforms.cpp	/^void Sigmoid::forward(mat& out,const mat& in,bool train){$/;"	f	class:Sigmoid
forward	./transforms.cpp	/^void Softmax::forward(mat& out,const mat& in,bool train){$/;"	f	class:Softmax
getBatch	./dataset.cpp	/^void Dataset::getBatch(int batchSize, mat& batch, mat& batchLabel, bool isRandom){$/;"	f	class:Dataset
getCols	../include/host_matrix.h	/^	size_t getCols() const {return _cols;}$/;"	f	class:host_matrix
getData	../include/host_matrix.h	/^	T* getData() const {return _data;}$/;"	f	class:host_matrix
getData	./dataset.cpp	/^mat Dataset::getData(){$/;"	f	class:Dataset
getDataNum	./dataset.cpp	/^size_t Dataset::getDataNum(){ return _dataNum; }$/;"	f	class:Dataset
getFeatureDim	./dataset.cpp	/^size_t Dataset::getFeatureDim(){ return _featureDim; }$/;"	f	class:Dataset
getHiddenForward	./dnn.cpp	/^void DNN::getHiddenForward(mat& outputMat, const mat& inputMat){$/;"	f	class:DNN
getInputDim	./transforms.cpp	/^size_t Transforms::getInputDim()const{$/;"	f	class:Transforms
getInputDimension	./dnn.cpp	/^size_t DNN::getInputDimension(){$/;"	f	class:DNN
getLabel_mat	./dataset.cpp	/^mat Dataset::getLabel_mat(){$/;"	f	class:Dataset
getLabel_vec	./dataset.cpp	/^vector<size_t> Dataset::getLabel_vec(){$/;"	f	class:Dataset
getNum	./parser.cpp	/^bool PARSER::getNum(string name,float& num){$/;"	f	class:PARSER
getNum	./parser.cpp	/^bool PARSER::getNum(string name,int& num){$/;"	f	class:PARSER
getNum	./parser.cpp	/^bool PARSER::getNum(string name,size_t& num){$/;"	f	class:PARSER
getNumLayers	./dnn.cpp	/^size_t DNN::getNumLayers(){$/;"	f	class:DNN
getOutputDim	./transforms.cpp	/^size_t Transforms::getOutputDim()const{$/;"	f	class:Transforms
getOutputDimension	./dnn.cpp	/^size_t DNN::getOutputDimension(){$/;"	f	class:DNN
getRecogData	./dataset.cpp	/^bool Dataset::getRecogData(int batchSize, mat& batch, vector<size_t>& batchLabel){$/;"	f	class:Dataset
getRows	../include/host_matrix.h	/^	size_t getRows() const {return _rows;}$/;"	f	class:host_matrix
getString	./parser.cpp	/^bool PARSER::getString(string name,string& str){$/;"	f	class:PARSER
host_geam	../include/host_matrix.h	/^void host_geam(const host_matrix<T>& A,const host_matrix<T>& B,host_matrix<T>& C,T alpha=1.0,T beta= 1.0,bool transA=false, bool transB=false){$/;"	f
host_gemm	../include/host_matrix.h	/^void host_gemm(const host_matrix<T>& A,const host_matrix<T>& B, host_matrix<T>& C, T alpha = 1.0, T beta=0.0, bool transA=false, bool transB=false){$/;"	f
host_matrix	../include/host_matrix.h	/^class host_matrix{$/;"	c
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(){$/;"	f	class:host_matrix
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(T* data,size_t r,size_t c){$/;"	f	class:host_matrix
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(const Transpose& src){$/;"	f	class:host_matrix
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(const host_matrix<T>& src){$/;"	f	class:host_matrix
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(size_t r,size_t c){$/;"	f	class:host_matrix
host_matrix	../include/host_matrix.h	/^host_matrix<T>::host_matrix(size_t r,size_t c,T value){$/;"	f	class:host_matrix
inputFtreToMat	./dataset.cpp	/^mat Dataset::inputFtreToMat(float** input, int r, int c){$/;"	f	class:Dataset
isLabeled	../include/dataset.h	/^    bool  isLabeled( ){ return _isLabeled; }	$/;"	f	class:Dataset
isNum	./parser.cpp	/^bool PARSER::isNum(string str){$/;"	f	class:PARSER
load	./dnn.cpp	/^bool DNN::load(const string& fn){$/;"	f	class:DNN
mat	../include/dataset.h	/^typedef host_matrix<float> mat;$/;"	t
mat	../include/dnn.h	/^typedef host_matrix<float> mat;$/;"	t
mat	../include/transforms.h	/^typedef host_matrix<float> mat;$/;"	t
mat	../include/util.h	/^typedef host_matrix<float> mat;$/;"	t
mat	./dataset.cpp	/^typedef host_matrix<float> mat;$/;"	t	file:
mat	./dnn.cpp	/^typedef host_matrix<float> mat;$/;"	t	file:
mat	./transforms.cpp	/^typedef host_matrix<float> mat;$/;"	t	file:
mat	./util.cpp	/^typedef host_matrix<float> mat;$/;"	t	file:
myNnGen	../include/mynngen.h	/^		myNnGen(){$/;"	f	class:myNnGen
myNnGen	../include/mynngen.h	/^		myNnGen(float mean,float var){$/;"	f	class:myNnGen
myNnGen	../include/mynngen.h	/^class myNnGen{$/;"	c
operator &	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator & (const host_matrix<T>& rhs) const{$/;"	f	class:host_matrix
operator &=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator &= (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator ()	../include/mynngen.h	/^		float operator ()(){$/;"	f	class:myNnGen
operator *	../include/host_matrix.h	/^		host_matrix<T> operator * (const Transpose rhs) {$/;"	f	class:host_matrix::Transpose
operator *	../include/host_matrix.h	/^		host_matrix<T> operator * (const host_matrix<T>& rhs) {$/;"	f	class:host_matrix::Transpose
operator *	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator * (T val) const{$/;"	f	class:host_matrix
operator *	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator * (const host_matrix<T>& rhs) const{$/;"	f	class:host_matrix
operator *	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator * (const typename host_matrix::Transpose& rhs) const{$/;"	f	class:host_matrix
operator *	../include/host_matrix.h	/^host_matrix<T> operator * (T val, const host_matrix<T>& m){$/;"	f
operator *=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator *= (T val){$/;"	f	class:host_matrix
operator *=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator *= (const Transpose& rhs){$/;"	f	class:host_matrix
operator *=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator *= (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator +	../include/host_matrix.h	/^		host_matrix<T> operator + (const host_matrix<T>& rhs) {$/;"	f	class:host_matrix::Transpose
operator +	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator + (T val) const{$/;"	f	class:host_matrix
operator +	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator + (const host_matrix<T>& rhs) const{$/;"	f	class:host_matrix
operator +	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator + (const typename host_matrix<T>::Transpose& rhs) const{$/;"	f	class:host_matrix
operator +	../include/host_matrix.h	/^host_matrix<T> operator + (T val, const host_matrix<T>& m){$/;"	f
operator +=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator += (T val){$/;"	f	class:host_matrix
operator +=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator += (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator +=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator += (const typename host_matrix<T>::Transpose& rhs){$/;"	f	class:host_matrix
operator -	../include/host_matrix.h	/^		host_matrix<T> operator - (const host_matrix<T>& rhs) {$/;"	f	class:host_matrix::Transpose
operator -	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator - (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator -	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator - (const typename host_matrix<T>::Transpose& rhs) const{$/;"	f	class:host_matrix
operator -	../include/host_matrix.h	/^host_matrix<T> operator - (T val, const host_matrix<T>& m){$/;"	f
operator -	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator - (T val) const{$/;"	f	class:host_matrix
operator -=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator -= (T val){$/;"	f	class:host_matrix
operator -=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator -= (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator -=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator -= (const typename host_matrix<T>::Transpose& rhs){$/;"	f	class:host_matrix
operator /	../include/host_matrix.h	/^host_matrix<T> host_matrix<T>::operator \/ (T val) const{$/;"	f	class:host_matrix
operator /=	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator \/= (T val){$/;"	f	class:host_matrix
operator =	../include/host_matrix.h	/^host_matrix<T>& host_matrix<T>::operator = (const host_matrix<T>& rhs){$/;"	f	class:host_matrix
operator ~	../include/host_matrix.h	/^typename host_matrix<T>::Transpose host_matrix<T>::operator ~ () const{$/;"	f	class:host_matrix
outputNumtoBin	./dataset.cpp	/^mat Dataset::outputNumtoBin(int* outputVector, int vectorSize)$/;"	f	class:Dataset
parseDim	./util.cpp	/^void parseDim(string str,vector<size_t>& dim){$/;"	f
parseOneOption	./parser.cpp	/^bool PARSER::parseOneOption(string& str){$/;"	f	class:PARSER
parseOptions	./parser.cpp	/^void PARSER::parseOptions(string str,vector<string>& vout){$/;"	f	class:PARSER
predict	./dnn.cpp	/^void DNN::predict(vector<size_t>& result, const mat& inputMat){$/;"	f	class:DNN
print	../include/host_matrix.h	/^void host_matrix<T>::print(int precision) const{$/;"	f	class:host_matrix
print	./parser.cpp	/^void PARSER::print()const{$/;"	f	class:PARSER
print	./transforms.cpp	/^void Transforms::print(ofstream& out){$/;"	f	class:Transforms
pushOne	./util.cpp	/^void pushOne(mat& in){$/;"	f
rand_init	./util.cpp	/^void rand_init(mat& w,float range){$/;"	f
rand_norm	./util.cpp	/^void rand_norm(mat& w,myNnGen& ran){$/;"	f
read	./parser.cpp	/^bool PARSER::read(int argc,char** argv){$/;"	f	class:PARSER
read	./parser.cpp	/^bool PARSER::read(string spec){$/;"	f	class:PARSER
reset	../include/mynngen.h	/^		void reset(float mean, float var){$/;"	f	class:myNnGen
resize	../include/host_matrix.h	/^void host_matrix<T>::resize(size_t r,size_t c){$/;"	f	class:host_matrix
resize	../include/host_matrix.h	/^void host_matrix<T>::resize(size_t r,size_t c,T val){$/;"	f	class:host_matrix
save	./dnn.cpp	/^void DNN::save(const string& fn){$/;"	f	class:DNN
seed	../include/mynngen.h	/^		void seed(unsigned s){$/;"	f	class:myNnGen
setLearningRate	./dnn.cpp	/^void DNN::setLearningRate(float learningRate){$/;"	f	class:DNN
setMomentum	./dnn.cpp	/^void DNN::setMomentum(float momentum){$/;"	f	class:DNN
showParam	../include/mynngen.h	/^		void showParam(){$/;"	f	class:myNnGen
sigmoid	../include/host_math.h	/^host_matrix<T> sigmoid(const host_matrix<T>& m){$/;"	f
size	../include/host_matrix.h	/^	size_t size() const {return _rows*_cols;}$/;"	f	class:host_matrix
start	./parser.cpp	/^bool PARSER::start(vector<string> vx){$/;"	f	class:PARSER
str2Num	./parser.cpp	/^float PARSER::str2Num(string str){$/;"	f	class:PARSER
substractMaxPerCol	./transforms.cpp	/^void substractMaxPerCol(mat& z){$/;"	f
toUpperCase	./parser.cpp	/^string PARSER::toUpperCase(string str){$/;"	f	class:PARSER
train	./dnn.cpp	/^void DNN::train(Dataset& labeledData, size_t batchSize, size_t maxEpoch = MAX_EPOCH, float trainRatio = 0.8, float alpha = 0.98){$/;"	f	class:DNN
write	./transforms.cpp	/^void Sigmoid::write(ofstream& out){$/;"	f	class:Sigmoid
write	./transforms.cpp	/^void Softmax::write(ofstream& out){$/;"	f	class:Softmax
~DNN	./dnn.cpp	/^DNN::~DNN(){$/;"	f	class:DNN
~Dataset	./dataset.cpp	/^Dataset::~Dataset(){$/;"	f	class:Dataset
~PARSER	./parser.cpp	/^PARSER::~PARSER(){}$/;"	f	class:PARSER
~host_matrix	../include/host_matrix.h	/^host_matrix<T>::~host_matrix(){$/;"	f	class:host_matrix
~myNnGen	../include/mynngen.h	/^		~myNnGen(){delete _dis;}$/;"	f	class:myNnGen
